openapi: "3.0.0"
info:
  description: "This is the documentation for the interfaces and routes to the Viral API. https://github.com/aimenhamed/SENG3011_Viral"
  version: "1.0.0"
  title: "Viral API"
servers:
  - url: https://teamviral-api.herokuapp.com/api/v1/
    description: Production server (uses live data)
tags:
  - name: "Articles"
    description: "Everything related to articles"
  - name: "Reports"
    description: "Everything you need to know about reports"
  - name: "Users"
    description: "Interact with our application through an account"
  - name: "Countries"
    description: "Receive information specific to the countries"
paths:
  /search:
    get:
      tags:
        - "Articles"
      summary: "Retrieve articles per a search criteria"
      description: "Retrieve articles based on a criteria provided in the request."
      operationId: "filterArticles"
      parameters:
        - in: header
          name: period_of_interest
          description: The period of time to search through which includes the start and end times.
          schema:
            type: string # stringified json
          required: true
          example: '{"start":"2009-09-23","end":"2021-09-24"}'

        - in: header
          name: location
          description: The location of where the cases were reported.
          schema:
            type: string
          required: true
          example: '"India"'
        - in: header
          name: key_terms
          description: Key search terms that our database can query.
          schema:
            type: "string"
            items:
              type: "string"
          required: true
          example: '["nipah virus"]'

      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"
                
        "400":
          "$ref": "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /articles/dump:
    get:
      tags:
        - "Articles"
      summary: "Retrieve all articles"
      description: "Dumps all articles currently stored in the database. Main text is excluded."
      operationId: "articlesDump"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    articleId:
                      type: "string"
                    url:
                      type: "string"
                    dateOfPublication:
                      type: "string"
                    headline:
                      type: "string"
                    reports:
                      type: "array"
                      items:
                        "$ref": "#/components/schemas/Report"
        "400":
          "$ref": "#/components/responses/BadRequest"
        "500":
          "$ref": "#/components/responses/ServerError"
                

  /articles/{articleId}:
    get:
      tags:
        - "Articles"
      summary: "Retrieves an article matching id"
      description: "Queries the database for an article with identical id"
      operationId: "articlesOne"
      parameters:
        - name: articleId
          in: path
          description: "a UUID representing the article being queried"
          schema:
            type: string
          required: true
          example: "c4ebd485-a22a-4ac3-882b-eec4daabd2b0"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  "$ref": "#/components/schemas/Article"
        "400":
          "$ref": "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          "$ref": "#/components/responses/ServerError"

  /reports/dump:
    get:
      tags:
        - "Reports"
      summary: "Retrieve all reports"
      description: "Dumps all reports currently stored in the database."
      operationId: "reportDump"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  "$ref": "#/components/schemas/Report"
        "400":
          "$ref": "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /reports/{reportId}:
    get:
      tags:
        - "Reports"
      summary: "Retrieve a report matching id"
      description: "Dumps all reports currently stored in the database."
      operationId: "reportsOne"
      parameters:
        - name: reportId
          in: "path"
          description: "a UUID representing the report being queried"
          schema:
            type: string
          required: true
          example: "8cf91f9d-4484-469e-b668-225ed3bb5006"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/register:
    post:
      tags:
        - "Users"
      summary: "Registers a user"
      description: "Creates new user in database and registers them."
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: string
                email:
                  type: string
                password: 
                  type: string
              example:
                name: "Bob"
                email: "bobthebuilder@gmail.com"
                password: "password"
        
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: { 
                    "token":
                      type:"string",
                    "user": { $ref: "#/components/schemas/User" } 
                    
                  },
                }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/login:
    post:
      tags:
        - "Users"
      summary: "User logs in"
      description: "Logs existing user in."
      operationId: "loginUser"
      requestBody:
        content:
          application/json:
              schema:
                type: "object"
                properties:
                  email:
                    type: string
                  password: 
                    type: string
                example:
                  email: "bobthebuilder@gmail.com"
                  password: "password"

      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: { "user": { $ref: "#/components/schemas/User" } },
                }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: "Retrieve specific user"
      description: "Retrieve specific user."
      operationId: "getUser"
      parameters:
        - name: userId
          in: "path"
          description: "a UUID representing the user being queried"
          schema:
            type: string
          required: true
          example: "7bb72fe5-6b8c-4984-8efc-758322e8c8a2"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                {
                  type: "object",
                  properties: { "user": { $ref: "#/components/schemas/User" } },
                }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /users/bookmark-article:
    put:
      tags:
        - "Users"
      summary: "Bookmarks article under user profile"
      description: "Bookmarks article under user profile."
      operationId: "addArticleToUser"
      requestBody:
        "content":
          {
            "application/json":
              {
                schema:
                  {
                    type: "object",
                    properties:
                      {
                        userId: { type: "string" },
                        articleId: { type: "string" },
                      },
                    example:
                      {
                        userId: "7bb72fe5-6b8c-4984-8efc-758322e8c8a2",
                        articleId: "c4ebd485-a22a-4ac3-882b-eec4daabd2b0"
                      }
                  },
              },
          }
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              {
                schema:
                  {
                    type: "object",
                    properties:
                      {
                        user: { $ref: "#/components/schemas/User" },
                        article: { $ref: "#/components/schemas/Article" },
                      },
                  },
              }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  
  /users/remove-bookmark:
    put:
      tags:
        - "Users"
      summary: "Removes a bookmarked article under user profile"
      description: "Removes bookmark under user profile"
      operationId: "removeArticleFromUser"
      requestBody:
        "content":
          {
            "application/json":
              {
                schema:
                  {
                    type: "object",
                    properties:
                      {
                        userId: { type: "string" },
                        articleId: { type: "string" },
                      },
                    example:
                      {
                        userId: "7bb72fe5-6b8c-4984-8efc-758322e8c8a2",
                        articleId: "c4ebd485-a22a-4ac3-882b-eec4daabd2b0"
                      }
                  },
              },
          }
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              {
                schema:
                  {
                    type: "object",
                    properties:
                      {
                        user: { $ref: "#/components/schemas/User" },
                      },
                  },
              }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          "$ref": "#/components/responses/ServerError"      

  /advice/all:
    get:
      tags:
        - "Countries"
      summary: "Retrieve the advice level of all countries at risk"
      description: "Countries that are potentially at risk will have their advice level shown here. Countries that are deemed save to travel to will not be included here."
      operationId: "adviceAll"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties: 
                    {
                      country: {type: "string"},
                      adviceLevel: {type: "string"}
                    }
                  example: 
                    {
                      country: "Ukraine",
                      adviceLevel: "Do not travel"
                    }
        "500":
          "$ref": "#/components/responses/ServerError"
  
  /advice:
    get:
      tags:
        - "Countries"
      summary: "Retrieve specific information on a country at risk"
      description: "Retrieves all relevant information on the country."
      operationId: "adviceSpecific"
      parameters:
      - name: country
        in: "query"
        description: "the name of the country being queried (case sensitive)"
        schema:
          type: string
        required: true
        example: "Ukraine"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties: 
                  {
                    advice: 
                      {
                        $ref: "#/components/schemas/Advice"
                      },
                    log:
                      {
                        "$ref": "#/components/schemas/Log"
                      }
                  }
                
              example:
                {
                  "advice": {
                      "adviceId": "84ee17ac-c345-48d8-9c99-1c6c7616c775",
                      "url": "https://www.smartraveller.gov.au/destinations/europe/ukraine",
                      "country": {
                          "countryId": "b1b08336-d818-4e09-adbb-08b55895f34b",
                          "name": "Ukraine",
                          "code": "UA",
                          "coords": [
                              49,
                              32
                          ]
                      },
                      "continent": "Europe",
                      "adviceLevel": "Do not travel",
                      "latestAdvice": "The Russian invasion of Ukraine is ongoing. The security situation continues to be volatile and is deteriorating rapidly. Infrastructure and military facilities have been struck by rocket attacks in Lviv. Heavy fighting, including bombardments, explosions and missile launches, is ongoing throughout Ukraine. There have been many civilian casualties. Foreigners have been killed and may be targeted, including in areas not directly affected by fighting. Do not travel to Ukraine, there is a real risk to life.  If you’re in Ukraine, shelter in place until you judge it’s safe to depart. Seek shelter in a hardened structure away from windows. Review your personal security plans. Be alert and aware of your surroundings. Continue to monitor advice on Smartraveller and reputable local and international media. Where it is safe to do so, you should leave Ukraine. You're responsible for your own safety and that of your family.",
                      "lastUpdate": "2022-03-30"
                  },
                  "log": {
                      "teamName": "Team Viral",
                      "dataSource": "https://www.who.int/csr/don/en/",
                      "accessTime": "23:14:03 GMT+1100 (Australian Eastern Daylight Time)"
                  }
              }
        "404":
          "$ref": "#/components/responses/NotFound"
        "500":
          "$ref": "#/components/responses/ServerError" 
  /comment:
    post:
      tags:
        - "Countries"
      summary: "Create a comment in a country page"
      description: "Create a public message in a country page."
      operationId: "commentPost"
      requestBody:
        content: {
          "application/json":
              {
                schema:
                  {
                    type: "object",
                    properties:
                      {
                        userId: { type: "string" },
                        countryId: { type: "string" },
                        message: { type: "string" }
                      },
                    example:
                      {
                        "userId": "11db4e8a-b16a-4667-a5e7-09a6598fbbab",
                        "countryId": "612532d9-8661-4a3f-85b4-77e5322294cb",
                        "message": "aabababababa"
                      }
                  },
              },
        }
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties: 
                  {
                    comment: 
                      {
                        "$ref": "#/components/schemas/Comment"
                      },
                    log:
                      {
                        "$ref": "#/components/schemas/Log"
                      }
                  }
                example:
                  {
                    
                    "comment": {
                        "commentId": "48d79785-ea92-45a7-80b6-a2c737697716",
                        "createdBy": {
                            "userId": "11db4e8a-b16a-4667-a5e7-09a6598fbbab",
                            "name": "Aimen",
                            "email": "HiAimen@gmail.com",
                            "bookmarkedArticles": [],
                            "bookmarkedCountries": []
                        },
                        "country": {
                            "countryId": "612532d9-8661-4a3f-85b4-77e5322294cb",
                            "name": "Afghanistan",
                            "code": "AF",
                            "coords": [
                                33,
                                65
                            ]
                        },
                        "message": "aabababababa",
                        "date": "2022-04-01T12:07:56.885Z"
                    },
                    "log": {
                        "teamName": "Team Viral",
                        "dataSource": "https://www.who.int/csr/don/en/",
                        "accessTime": "23:07:57 GMT+1100 (Australian Eastern Daylight Time)"
                    }
                  
                  }
        
      
components:
  responses:
    BadRequest:
      description: "The request was not formed with correct inputs."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              errorCode:
                type: "integer"
                example: 400
              errorMessage:
                type: "string"
                example: "Bad request"
    NotFound:
      description: "The requested resource was not found"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              errorCode:
                type: "integer"
                example: 404
              errorMessage:
                type: "string"
                example: "Not found"
    ServerError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              errorCode:
                type: "integer"
                example: 500
              errorMessage:
                type: "string"
                example: "Internal server error"
  schemas:
    Period:
      type: "object"
      properties:
        start:
          type: "string"
          description: "Start time"
        end:
          type: "string"
          description: "End time"
      xml:
        name: "Period"
    Report:
      type: "object"
      properties:
        reportId:
          type: "string"
        diseases:
          type: "array"
          items:
            type: "string"
        syndromes:
          type: "array"
          items:
            type: "string"
        eventDate:
          type: "string"
        locations:
          type: "array"
          items:
            type: "string"
    Article:
      type: "object"
      properties:
        articleId:
          type: "string"
        url:
          type: "string"
        dateOfPublication:
          type: "string"
        headline:
          type: "string"
        mainText:
          type: "string"
        reports:
          type: "array"
          items:
            "$ref": "#/components/schemas/Report"
    User:
      type: "object"
      properties:
        userId:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        bookmarkedArticles:
          type: "array"
          items:
            "$ref": "#/components/schemas/Article"
        bookmarkedCountries:
          type: "array"
          items:
            "$ref": "#/components/schemas/Country"
    Country:
      type: "object"
      properties:
        countryId:
          type: "string"
        name:
          type: "string"
        code:
          type: "string"
        coords:
          type: "array"
          minItems: 2
          maxItems: 2
          items:
            type: "number"
    Advice:
      type: "object"
      properties:
        adviceId: 
          type: "string"
        url:
          type: "string"
        country: 
          "$ref": "#/components/schemas/Country"
        continent:
          type: "string"
        adviceLevel:
          type: "string"
        latestAdvice:
          type: "string"
        lastUpdate:
          type: "string"
    Comment:
      type: "object"
      properties:
        commentId: 
          type: "string"
        createdBy:
          "$ref": "#/components/schemas/User"
        country: 
          "$ref": "#/components/schemas/Country"
        message:
          type: "string"
        date:
          type: "string"
    Log:
      type: "object"
      properties:
        teamName: 
          type: "string"
        dataSource:
          type: "string"
        accessTime:
          type: "string"