openapi: "3.0.0"
info:
  description: "This is the documentation for the interfaces and routes to the Viral API. https://github.com/aimenhamed/SENG3011_Viral"
  version: "1.0.0"
  title: "Viral API"
servers:
  - url: https://teamviral-api.herokuapp.com/api/v1/
    description: Production server (uses live data)
tags:
  - name: "Articles"
    description: "Everything related to articles"
  - name: "Reports"
    description: "Everything you need to know about reports"
paths:
  /search:
    get:
      tags:
        - "Articles"
      summary: "Retrieve articles per a search criteria"
      description: "Retrieve articles based on a criteria provided in the request."
      operationId: "filterArticles"
      parameters:
        - in: header
          name: period_of_interest
          description: The period of time to search through which includes the start and end times.
          schema:
            $ref: "#/components/schemas/Period"
          required: true
          example: '{"start":"2009-09-23","end":"2021-09-24"}'
            
        - in: header
          name: location
          description: The location of where the cases were reported.
          schema:
            type: string
          required: true
          example: '"India"'
        - in: header
          name: key_terms
          description: Key search terms that our database can query.
          schema:
            type: "string"
            items:
              type: "string"
          required: true
          example: '["nipha virus", "Encephalitis"]'
        
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        "400":
          "$ref": "#/components/responses/BadRequest"

  /articles:
    get:
      tags: 
        - "Articles"
      summary: "Retrieve a select number of articles"
      description: "Given query information, returns a list of articles constrained for pagination."
      operationId: "listArticles"
      parameters:
        - name: limit
          in: query
          description: "Limit the number of articles on a page"
          schema:
            type: integer
          required: True
        - name: offset
          in: query
          description: "Specifies the page number of the articles to be displayed"
          schema:
            type: integer
          required: True
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  "$ref": "#/components/schemas/Article"
        "400":
          "$ref": "#/components/responses/BadRequest"
  
  /articles/dump:
    get:
      tags:
        - "Articles"
      summary: "Retrieve all articles"
      description: "Dumps all articles currently stored in the database."
      operationId: "articlesDump"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  "$ref": "#/components/schemas/Article"
        "400":
          "$ref": "#/components/responses/BadRequest"
  
  /articles/{articleId}:
    get:
      tags: 
        - "Articles"
      summary: "Retrieves an article matching id"
      description: "Queries the database for an article with identical id"
      operationId: "articlesOne"
      parameters: 
        - name: articleId
          in: path
          description: "a UUID representing the article being queried"
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  "$ref": "#/components/schemas/Article"
        "400":
          "$ref": "#/components/responses/BadRequest"
  
  /reports/dump:
    get:
      tags:
        - "Reports"
      summary: "Retrieve all reports"
      description: "Dumps all reports currently stored in the database."
      operationId: "reportDump"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  "$ref": "#/components/schemas/Report"
        "400":
          "$ref": "#/components/responses/BadRequest"
  
  /reports/{reportId}:
    get:
      tags:
        - "Reports"
      summary: "Retrieve a report matching id"
      description: "Dumps all reports currently stored in the database."
      operationId: "reportsOne"
      parameters:
        - name: reportId
          in:           "path"
          description:  "a UUID representing the report being queried"
          schema:
            type:       string
          required:     true
      responses:
        "200":
          description:  "Successful response"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Report"
        "400":
          $ref: "#/components/responses/BadRequest"
components:
  responses:
    BadRequest:
      description: "The request was not formed with correct inputs."
      content:
        application/json:
          schema:
            type: "object"
            properties:
              errorCode:
                type: "integer"
                example: 400
              errorMessage:
                type: "string"
                example: "Bad request"
  schemas:
    Period:
      type: "string"
      properties:
        start:
          type: "string"
          description: "Start time"
        end:
          type: "string"
          description: "End time"
      xml:
        name: "Period"
    Report:
      type: "object"
      properties:
        reportId:
          type: "string"
        diseases:
          type: "array"
          items:
            type: "string"
        syndromes:
          type: "array"
          items:
            type: "string"
        eventDate:
          type: "string"
        locations:
          type: "array"
          items:
            type: "string"
    Article:
      type: "object"
      properties:
        articleId:
          type: "string"
        url:
          type: "string"
        dateOfPublication:
          type: "string"
        headline:
          type: "string"
        mainText:
          type: "string"
        reports:
          type: "array"
          items:
            "$ref": "#/components/schemas/Report"
